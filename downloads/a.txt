1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
1) Testing Our Blockchain

To start the first node, type the following command in Terminal:

$ python blockchain.py 3000

a) Our first blockchain running on the first node is now running. It is also listening at
port 5000, where you can add transactions to it and mine a block.

In another Terminal window, type the following command to view the content of the
blockchain running on the node:

$ curl http://localhost:3000/blockchain


b) Note The first block (index 0) is the genesis block.

Let’s try mining a block to see how it will affect the blockchain. 
Type the following command in Terminal:

$ curl http://localhost:3000/mine

The block that is mined will now be returned

c) Note Observe that the block contains a single transaction, which is the reward given to the miner.
You can now issue the command to obtain the blockchain from the node:

$ curl http://localhost:5000/blockchain


d) Tip Remember that the default difficulty target is set to four zeros (difficulty_target = "0000"). You can change it to five zeros and retest the
blockchain. 
You will realize that it now takes a longer time to mine a block, since it is more difficult to find a nonce that results in a hash 
beginning with five zeros. 


Let’s add a transaction to a block by issuing the following command in Terminal:

curl -X POST -H "Content-Type: application/json" -d '{ "sender": "04d0988bfa799f7d7ef9ab3de97ef481", "recipient":
"cd0f75d2367ad456607647edde665d6f", "amount": 5}' "http://localhost:3000/transactions/new"

Caution Note that Windows does not support single quote (') when using curl in the command line. 
Hence, you need to use double quote and use the slash character (\) to turn off the meaning of double quotes (") in your double-quoted
string. The preceding command in Windows would be


curl -X POST -H "Content-Type: application/json" -d "{\"sender\": \"04d0988bfa799f7d7ef9ab3de97ef481\",\"recipient\": \"cd0f75d2367ad456607647edde665d6f\",\"amount\": 5}" "http://localhost:3000/transactions/new"



2) Synchronizing Blockchains

In real life, a blockchain network consists of multiple nodes maintaining copies of the same blockchain. 
So, there must be a way for the nodes to synchronize so that every single node is referring to the same identical blockchain.


Testing the Blockchain with Multiple Nodes

In the Terminal that is running the blockchain.py application, press Ctrl+C to stop the server. 

Type the following command to restart it:
$ python blockchain.py 3000

Open another Terminal window. 
Type the following command:
$ python blockchain.py 3001


a) Let’s mine two blocks in the first node (5000) by typing the following commands in
another Terminal window:

$ curl http://localhost:3000/mine
$ curl http://localhost:3000/mine


b) The first node should now have three blocks:

$ curl http://localhost:3000/blockchain


c) As we have not done any mining on the second node (5001), there is only one block
in this node:

$ curl http://localhost:5001/blockchain


d) To tell the second node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3000\"]}" -X POST http://localhost:3001/nodes/add_nodes

The preceding command registers a new node with the node at port 3001 that there is a neighboring node listening at port 3000.



e) To tell the first node that there is a neighbor node, use the following command:

curl -H "Content-type: application/json" -d "{\"nodes\" : [\"http://127.0.0.1:3001\"]}" -X POST http://localhost:3000/nodes/add_nodes

$ curl -H "Content-type: application/json" -d '{"nodes" : ["http://127.0.0.1:5001"]}' -X POST http://localhost:3000/nodes/add_nodes (for unix)


The preceding command registers a new node with the node at port 3000 that there is a neighboring node listening at port 3001.


f) With the first node aware of the existence of the second node (and vice versa), let’s try to synchronize the blockchain starting from the first node:

$ curl http://localhost:3000/nodes/sync


g) As the result shows, the first node has the longest chain (three blocks), and hence the blockchain is the latest, and it remains intact. 
We now synchronize from the second node:

$ curl http://localhost:3001/nodes/sync

As the second node’s blockchain only has one block, it is therefore deemed outdated.
It now replaces its blockchain from that of the first node.
